{"version":3,"sources":["componets/Home/git_graph.png","componets/Home/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Home","Menu","fixed","inverted","Container","Item","as","header","text","style","marginTop","Header","Icon","name","size","className","dividing","Grid","container","columns","doubling","Column","Segment","Image","src","git_graph_sample","App","path","component","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,uC,uQCyE5BC,EAzDQ,WAErB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,MAAM,MAAMC,UAAQ,GACxB,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAA,EAAKI,KAAN,CAAWC,GAAG,IAAIC,QAAM,GAAxB,QACA,kBAACN,EAAA,EAAKI,KAAN,CAAWC,GAAG,KAAd,gBAIJ,kBAACF,EAAA,EAAD,CAAWI,MAAI,EAACC,MAAO,CAAEC,UAAW,QAClC,kBAACC,EAAA,EAAD,CAAQL,GAAG,MACT,kBAACM,EAAA,EAAD,CAAMC,KAAK,cAAcC,KAAK,SADhC,IAXe,aAef,kBAACV,EAAA,EAAD,CAAWW,UAAU,UAAUP,MAAI,EAACC,MAAO,CAAEC,UAAW,QACtD,kBAACC,EAAA,EAAD,CAAQL,GAAG,KAAKU,UAAQ,GAAxB,WACA,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,UAAQ,GAClC,kBAACH,EAAA,EAAKI,OAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACX,EAAA,EAAD,CAAQL,GAAG,MAAX,wCACA,qHAGJ,kBAACW,EAAA,EAAKI,OAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACX,EAAA,EAAD,CAAQL,GAAG,MAAX,gEACA,8IAKN,kBAACW,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,UAAQ,GAClC,kBAACH,EAAA,EAAKI,OAAN,KACE,kBAACC,EAAA,EAAD,KACE,mIAMR,kBAAClB,EAAA,EAAD,CAAWW,UAAU,aAAaP,MAAI,EAACC,MAAO,CAAEC,UAAW,QACzD,kBAACC,EAAA,EAAD,CAAQL,GAAG,KAAKU,UAAQ,GAAxB,cACA,6GACA,kBAACO,EAAA,EAAD,CAAOC,IAAKC,IAAkBX,KAAK,UAGrC,kBAACV,EAAA,EAAD,CAAWW,UAAU,UAAUP,MAAI,EAACC,MAAO,CAAEC,UAAW,QACtD,kBAACC,EAAA,EAAD,CAAQL,GAAG,KAAKU,UAAQ,GAAxB,WACA,mICjDKU,G,OAVO,kBACpB,yBAAKX,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOY,KAAK,IAAIC,UAAW5B,IAC3B,kBAAC,IAAD,CAAU6B,GAAG,U,OCCCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ba11b6db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/git_graph.360ac090.png\";","import React from 'react';\nimport {\n  Container,\n  Divider,\n  Dropdown,\n  Grid,\n  Header,\n  Image,\n  List,\n  Menu,\n  Segment,\n  Icon,\n} from 'semantic-ui-react'\n\nimport git_graph_sample from './git_graph.png'\n\nconst Home: React.FC = () => {\n  const name: string = 'Test Name';\n  return (\n    <div>\n      <Menu fixed='top' inverted>\n        <Container>\n          <Menu.Item as='a' header>Home</Menu.Item>\n          <Menu.Item as='a'>Weekly Log</Menu.Item>\n        </Container>\n      </Menu>\n\n      <Container text style={{ marginTop: '5em' }}>\n        <Header as='h1'>\n          <Icon name='user circle' size='huge' /> {name}\n        </Header>\n\n        <Container className=\"summary\" text style={{ marginTop: '2em' }}>\n          <Header as='h2' dividing>Summary</Header>\n          <Grid container columns={2} doubling>\n            <Grid.Column>\n              <Segment>\n                <Header as='h3'>累計コード数</Header>\n                <p>ここに累計コード数を記入する</p>\n              </Segment>\n            </Grid.Column>\n            <Grid.Column>\n              <Segment>\n                <Header as='h3'>連続コーディング日数</Header>\n                <p>ここに連続コーディング日数を記入する</p>\n              </Segment>\n            </Grid.Column>\n          </Grid>\n\n          <Grid container columns={1} doubling>\n            <Grid.Column>\n              <Segment>\n                <p>連続〇〇日コミットなんてすごい！</p>\n              </Segment>\n            </Grid.Column>\n          </Grid>\n        </Container>\n\n        <Container className=\"commit-log\" text style={{ marginTop: '4em' }}>\n          <Header as='h2' dividing>Commit Log</Header>\n          <p>ここにGithubの草グラフを載せる</p>\n          <Image src={git_graph_sample} size='huge' />\n        </Container>\n\n        <Container className=\"project\" text style={{ marginTop: '4em' }}>\n          <Header as='h2' dividing>Project</Header>\n          <p>ここにプロジェクト一覧を表示する</p>\n        </Container>\n\n      </Container>\n    </div>)\n}\n\nexport default Home","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport Home from './componets/Home'\n\nimport './App.css';\n\nconst App: React.FC = () => (\n  <div className='container'>\n    <Switch>\n      <Route path=\"/\" component={Home}/>\n      <Redirect to=\"/\" />\n    </Switch>\n  </div>\n)\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-less/semantic.less'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}